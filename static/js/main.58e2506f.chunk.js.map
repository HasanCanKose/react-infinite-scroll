{"version":3,"sources":["components/Item.js","components/ItemList.js","components/Loader.js","App.js","serviceWorker.js","index.js"],"names":["Item","title","body","id","className","ItemList","posts","map","post","key","Loader","Component","App","props","getPosts","page","axios","get","then","response","setState","state","data","handleScroll","document","documentElement","scrollTop","scrollHeight","clientHeight","showLoading","loading","querySelector","classList","add","setTimeout","remove","prevState","searchField","window","addEventListener","this","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sRAgBeA,G,MAdF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,KAAMC,EAAS,EAATA,GAC3B,OACE,yBAAKC,UAAU,kBACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,UAAUD,GACzB,yBAAKC,UAAU,aACb,wBAAIA,UAAU,cAAcH,GAC5B,uBAAGG,UAAU,aAAaF,QCWrBG,EAjBE,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAClB,OACE,6BACGA,EAAMC,KAAI,SAAAC,GACT,OACE,kBAAC,EAAD,CACEC,IAAKD,EAAKL,GACVA,GAAIK,EAAKL,GACTF,MAAOO,EAAKP,MACZC,KAAMM,EAAKN,Y,iBCERQ,E,uKAVX,OACE,yBAAKN,UAAU,UACb,yBAAKA,UAAU,WACf,yBAAKA,UAAU,WACf,yBAAKA,UAAU,gB,GANFO,aCgENC,E,kDA3Db,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAaRC,SAAW,SAAAC,GACTC,IACGC,IADH,oEACoEF,IACjEG,MAAK,SAAAC,GACJ,EAAKC,SAAS,CAAEd,MAAM,GAAD,mBAAM,EAAKe,MAAMf,OAAjB,YAA2Ba,EAASG,aAlB5C,EAsBnBC,aAAe,WAAO,IAAD,EAC+BC,SAASC,gBAAnDC,EADW,EACXA,UAAWC,EADA,EACAA,aACfD,EAFe,EACcE,cACDD,GAC9B,EAAKE,eAzBU,EA6BnBA,YAAc,WACZ,IAAMC,EAAUN,SAASO,cAAc,WACvCD,EAAQE,UAAUC,IAAI,QAEtBC,YAAW,WACTJ,EAAQE,UAAUG,OAAO,QAEzBD,YAAW,WACT,EAAKd,UAAS,SAAAgB,GACZ,MAAO,CAAErB,KAAMqB,EAAUrB,KAAO,MAElC,EAAKD,SAAS,EAAKO,MAAMN,QACxB,OACF,MAvCH,EAAKM,MAAQ,CACXf,MAAO,GACP+B,YAAa,GACbtB,KAAM,GANS,E,gEAWjBuB,OAAOC,iBAAiB,SAAUC,KAAKjB,cACvCiB,KAAK1B,SAAS0B,KAAKnB,MAAMN,Q,+BAiCjB,IACAT,EAAUkC,KAAKnB,MAAff,MAER,OACE,yBAAKF,UAAU,OACb,+CAEA,kBAAC,EAAD,CAAUE,MAAOA,IACjB,kBAAC,EAAD,W,GAtDUK,aCME8B,QACW,cAA7BH,OAAOI,SAASC,UAEe,UAA7BL,OAAOI,SAASC,UAEhBL,OAAOI,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFvB,SAASwB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.58e2506f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Item = ({ title, body, id }) => {\r\n  return (\r\n    <div className=\"post-container\">\r\n      <div className=\"post\">\r\n        <div className=\"number\">{id}</div>\r\n        <div className=\"post-info\">\r\n          <h2 className=\"post-title\">{title}</h2>\r\n          <p className=\"post-body\">{body}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Item;\r\n","import React from \"react\";\r\nimport Item from \"./Item\";\r\n\r\nconst ItemList = ({ posts }) => {\r\n  return (\r\n    <div>\r\n      {posts.map(post => {\r\n        return (\r\n          <Item\r\n            key={post.id}\r\n            id={post.id}\r\n            title={post.title}\r\n            body={post.body}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ItemList;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Loader extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"loader\">\r\n        <div className=\"circle\"></div>\r\n        <div className=\"circle\"></div>\r\n        <div className=\"circle\"></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Loader;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport ItemList from \"./components/ItemList\";\nimport axios from \"axios\";\nimport Loader from \"./components/Loader\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      posts: [],\n      searchField: \"\",\n      page: 1\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"scroll\", this.handleScroll);\n    this.getPosts(this.state.page);\n  }\n  getPosts = page => {\n    axios\n      .get(`https://jsonplaceholder.typicode.com/posts?_limit=5&_page=${page}`)\n      .then(response => {\n        this.setState({ posts: [...this.state.posts, ...response.data] });\n      });\n  };\n\n  handleScroll = () => {\n    const { scrollTop, scrollHeight, clientHeight } = document.documentElement;\n    if (scrollTop + clientHeight >= scrollHeight) {\n      this.showLoading();\n    }\n  };\n\n  showLoading = () => {\n    const loading = document.querySelector(\".loader\");\n    loading.classList.add(\"show\");\n\n    setTimeout(() => {\n      loading.classList.remove(\"show\");\n\n      setTimeout(() => {\n        this.setState(prevState => {\n          return { page: prevState.page + 1 };\n        });\n        this.getPosts(this.state.page);\n      }, 300);\n    }, 2000);\n  };\n\n  render() {\n    const { posts } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1>Infinite Scroll</h1>\n\n        <ItemList posts={posts} />\n        <Loader />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}